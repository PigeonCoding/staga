"-- printing:" .
"Hello, World" .           // string printing
69             .           // int printing
0xFF           .           // hex printing (also supports binary and octal)
-69            .           // int printing
-0.69          .           // float printing
1 2 3 stack    pop pop pop // prints the stack

"\n-- arithmetics:" .
-5 5  +  "-5 + 5 : " print .
6 1   -  "6  - 1 : " print .
2 10  *  "2  * 10: " print .
10 5  /  "10 / 5 : " print .
"please note: you can only do arithmetics on the same type of number aka int + int or float + float" .

"\n-- condition:" .
5 10 < "5 < 10: " print .
5 10 > "5 > 10: " print .
5 5  = "5 = 5 : " print .
"please note: the result of the condition check is pushed to the stack that is why we can just print it since internally it is just an int" .

"\n-- if-else:" .
1 0 > if "condition is true" else "condition is false" done .
69 if "value isn't zero" else "it is zero" done .

"\n-- while:" .
0 while dup 20 < do dup . 1 + end pop // remove the iterator after a loop

"\n-- stack manipulation:" .
1 2 3 2 swap . . .
69 dup print " " print .

"\n-- memory:" .
"this was stores in mem no 1 and loaded from memory" 1 mems
1 meml .

"\n-- functions:" .
fn test1_ // start of a function names test1_
  69 dup .
  351 + .
fend // end of the function
jmp test1_ // jumping to the macro

"\n-- file loading:" .
load "foo"
jmp foo
